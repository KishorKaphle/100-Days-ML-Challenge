
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#my simple GUI tutorial

from tkinter import *
window = Tk()
window.geometry ('500x500')
window.title ('Welcome!')
#label1 = Label(window, text ="Welcome to Tkinter", relief = 'solid', fg = 'black', bg  = 'green', font = ('arial', 16, 'bold')).pack()

#adding button in GUI

#button1 = Button (window, text = 'Demo',relief = RIDGE, fg = 'white', bg  = 'yellow', font = ('arial', 16, 'bold')).pack()



#defining a function

def printt ():
    print ('Demo Display')


def exit1():
    exit()
    

#for Registration Form display

label1 = Label(window, text = 'Registration Form', relief = 'solid', width =20, font = ('arial', 19, 'bold'))
               
label1.place(x =100, y =100)

#for First Name display

label2 = Label(window, text = 'First Name:', width =20, font = ('arial', 10, 'bold'))
               
label2.place(x =70, y =150)

#for last name display
label3 = Label(window, text = 'Last Name:', width =20, font = ('arial', 10, 'bold'))
               
label3.place(x =70, y =180)


#lets create buttons

b1 = Button(window, text = 'Login', width = 12, bg ='brown', fg= 'white', command = printt())
b1.place (x = 80, y = 300)

b2 = Button(window, text = 'Exit', width = 12, bg ='brown', fg= 'white', command = exit1())
b2.place (x = 300, y = 300)



window.mainloop() # this part makes sure that the whole program for GUI remains in the loop untill the tkinter window/display is closed

#will continue learning with the project work

-----------------------------------------------------------------------------------------------------------------------------------------------
#Getting more insights on dataset

import pandas as pd
from pandas import set_option

set_option ('display.width', 100)

set_option ('precision', 2)

names = ['preg', 'gluco', 'bp', 'skinthick', 'insulin', 'bmi', 'dpf', 'age', 'outcome']
df = pd.read_csv('diabt.csv')
print (df.head())
print ('dimension of the data is : \n', df.shape) # for checking the dimensionality of the dataset
print ('\n', df.describe())#getting the statistical gist of the data

# reveiwing the correlation between attributes
correlations = df.corr(method = 'pearson')

#for better display layout

print ('\n correlations are: \n', correlations)


#reveiwing skew of attribute distribution
print ('\n skwness of features:\n \n', df.skew())

#learning continues!

------------------------------------------------------------------------------------------------------------------------------------------------------------
#making sure that dataset is present
import pandas as pd
df = pd. read_csv ('Heart Fail Prediction.csv')
print (df.head())

#visualizing data more meaningfully

#from seaborn
import seaborn as sns
fig = sns.pairplot(df)

# getting statistical meaining of dataset

print (df.describe())

#checking for null value

df.isnull().sum()

# building a simple logistic model

features = ['age', 'anaemia', 'creatinine_phosphokinase', 'diabetes', 'ejection_fraction', 'high_blood_pressure', 'platelets',
            'serum_creatinine', 'serum_sodium', 'sex', 'smoking', 'time']

X = df [features]
y = df ['DEATH_EVENT']


#splitting training and testing data

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split (X, y, test_size = 0.2, random_state = 0)


#model development and prediction

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()

#fitting the model with data

lr.fit(X_train, y_train)


#predicted values

y_pred = lr.predict(X_test)

print (y_pred)

import matplotlib.pyplot as plt
plt.hist(y_pred, color = 'b')
plt.hist(y_test, color = 'r')
plt.title ('Red bar represent actual outcome where as blue bar represent predicted outcome')
plt. xlabel ('Death case')
plt.ylabel ('frequency')
plt.legend()
plt.grid()
plt.show()

#model evaluation using confusion matrix

from sklearn import metrics
conf_mat = metrics.confusion_matrix(y_test, y_pred)
print ('\n confusion matrix: \n', conf_mat)


#confusion matrix evaluation
print ('\n Accuracy of prediction: ', metrics.accuracy_score(y_test, y_pred)
    )
print ('\n Precision of prediction: ', metrics.precision_score(y_test, y_pred)
      )
print ('\n Recall: ', metrics.recall_score(y_test, y_pred))

# I am aware that accuracy percentage of arround 73% is low after all I am using simple logistic regression but soon as I learned other powerful ML algorithm I will look into it and make the prediction more accurate.

-----------------------------------------------------------------------------------------------------------------------------------------------------
